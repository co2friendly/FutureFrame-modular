"""
Runway ML Integration Module
---------------------------
Integrates all Runway ML components into a single interface.
"""

import os
import logging
import time
from typing import Optional, Union, Dict, Any
from pathlib import Path

from .api_handler import RunwayAPIHandler
from .video_generator import RunwayVideoGenerator
from .download_manager import RunwayDownloadManager

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class RunwayIntegration:
    """
    Integrated interface for Runway ML video generation and download.
    """
    
    def __init__(self, api_key: Optional[str] = None):
        """
        Initialize the Runway ML integration.
        
        Args:
            api_key: The Runway ML API key (optional, will use env var if not provided)
        """
        self.api_key = api_key or os.environ.get("RUNWAYML_API_SECRET")
        
        if not self.api_key:
            raise ValueError(
                "No API key provided. Either pass api_key parameter or set RUNWAYML_API_SECRET environment variable."
            )
        
        # Initialize components
        self.api_handler = RunwayAPIHandler(self.api_key)
        self.video_generator = RunwayVideoGenerator(self.api_handler)
        self.download_manager = RunwayDownloadManager(self.api_handler)
        
        logger.info("RunwayIntegration initialized")
    
    def generate_and_download_video(
        self,
        image_path: Union[str, Path],
        prompt_text: str,
        output_path: Union[str, Path],
        duration: int = 5,
        ratio: str = "1280:720",
        model: str = "gen4_turbo",
        seed: Optional[int] = None,
        watermark: bool = False,
        polling_interval: float = 5.0,
        timeout: float = 300.0
    ) -> Dict[str, Any]:
        """
        Generate a video from an image and download it.
        
        Args:
            image_path: Path to the image file
            prompt_text: Text prompt describing the desired motion
            output_path: Path where the video will be saved
            duration: Video duration in seconds (5 or 10)
            ratio: Aspect ratio (e.g., "1280:720", "720:1280", etc.)
            model: Model to use (default: "gen4_turbo")
            seed: Optional seed for reproducibility
            watermark: Whether to include the Runway watermark
            polling_interval: How often to check status (seconds)
            timeout: Maximum time to wait (seconds)
            
        Returns:
            Dictionary with status information
        """
        result = {
            "success": False,
            "task_id": None,
            "video_path": None,
            "status": None,
            "error": None
        }
        
        try:
            # Step 1: Create the video generation task
            response = self.video_generator.create_video_from_image(
                image_path=image_path,
                prompt_text=prompt_text,
                duration=duration,
                ratio=ratio,
                model=model,
                seed=seed,
                watermark=watermark
            )
            
            task_id = response.get("id")
            result["task_id"] = task_id
            
            if not task_id:
                result["error"] = "No task ID returned from API"
                return result
            
            # Step 2: Wait for the task to complete
            success, task_data = self.video_generator.wait_for_completion(
                task_id=task_id,
                polling_interval=polling_interval,
                timeout=timeout
            )
            
            result["status"] = task_data.get("status")
            
            if not success:
                result["error"] = f"Task failed or timed out: {task_data.get('error', 'Unknown error')}"
                return result
            
            # Step 3: Download the generated video
            download_success = self.download_manager.download_from_task(
                task_data=task_data,
                output_path=output_path
            )
            
            if not download_success:
                result["error"] = "Failed to download video"
                return result
            
            # Success!
            result["success"] = True
            result["video_path"] = str(output_path)
            
        except Exception as e:
            logger.error(f"Error in generate_and_download_video: {str(e)}")
            result["error"] = str(e)
        
        return result


# Example usage
if __name__ == "__main__":
    # This code runs when the module is executed directly
    
    # Get API key from environment variable
    api_key = os.environ.get("RUNWAYML_API_SECRET")
    
    if not api_key:
        print("Please set the RUNWAYML_API_SECRET environment variable")
        exit(1)
    
    # Initialize the integration
    runway = RunwayIntegration(api_key)
    
    # Generate and download a video
    result = runway.generate_and_download_video(
        image_path="input.jpg",
        prompt_text="Camera slowly zooms in on the subject",
        output_path="output.mp4",
        duration=5,
        ratio="1280:720"
    )
    
    # Print the result
    if result["success"]:
        print(f"Video generated and downloaded successfully to: {result['video_path']}")
    else:
        print(f"Failed to generate video: {result['error']}")
